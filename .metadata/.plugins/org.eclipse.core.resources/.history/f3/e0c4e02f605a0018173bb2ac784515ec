//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.awt.event.ActionListener;

public class Pong extends Canvas implements KeyListener, Runnable
{
	private Ball ball;
	private Paddle leftPaddle;
	//private Paddle rightPaddle;
	private boolean[] keys;
	private BufferedImage back;
	private int leftScore = 0;
	private int rightScore = 0;
	private Level levelOne;
	private Level levelTwo;
	private ArrayList <Brick> bricks;
	

	public Pong()
	{
		//set up all variables related to the game
		ball = new Ball(300,300,10,10,Color.BLACK);
		leftPaddle = new Paddle(300,300,30,30,5);
		//rightPaddle = new Paddle(775,300,10,50,5);
		levelOne = new Level(0,0,200,20,Color.BLUE);
		levelTwo = new Level(0,0,50,20,Color.RED);
		bricks = levelOne.getLevel();
		
		keys = new boolean[4];

    
    	setBackground(Color.WHITE);
		setVisible(true);
		new Thread(this).start();
		addKeyListener(this);	//starts the key thread to log key strokes
		
		
	}
	
   public void update(Graphics window){
	   paint(window);
   }

   public void paint(Graphics window)
   {
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D)window;

		//take a snap shop of the current screen and save it as an image
		//that is the exact same width and height as the current screen
		if(back==null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();


		ball.moveAndDraw(graphToBack);
		leftPaddle.draw(graphToBack);
		//rightPaddle.draw(graphToBack);


		//see if ball hits left wall or right wall
		
		
		//scoring and reset
		
		
		/*graphToBack.setColor(Color.BLACK);
		graphToBack.drawString("LeftScore = " + leftScore, 600, 500);
		graphToBack.drawString("RightScore = " + rightScore, 600, 530);*/
		
		if(!(ball.getX()>=10 && ball.getX()<=780) || ball.getY() > 550 || ball.getY() < 0)
		{
			ball.setXSpeed(0);
			ball.setYSpeed(0);
			
			
			
			ball.draw(graphToBack, Color.WHITE);
			
			/*if (!(ball.getX()>=10)){
				graphToBack.setColor(Color.WHITE);
				graphToBack.drawString("RightScore = " + rightScore, 600, 530);
				rightScore += 1;
				graphToBack.setColor(Color.BLACK);
				graphToBack.drawString("RightScore = " + rightScore, 600, 530);
			}
			if (!(ball.getX()<=780)){
				graphToBack.setColor(Color.WHITE);
				graphToBack.drawString("LeftScore = " + leftScore, 600, 500);
				leftScore += 1;
				graphToBack.setColor(Color.BLACK);
				graphToBack.drawString("LeftScore = " + leftScore, 600, 500);
			}*/
			
			
			ball.setPos(550, 300);
			
			ball.setXSpeed(-1);
			
			
					
			ball.setYSpeed(1);
			
			
			
		}

		
		//see if the ball hits the top or bottom wall 
		

		//see if the ball hits the left paddle
		
		
		
		//see if the ball hits the right paddle
		
		/*if (ball.didCollideLeft(leftPaddle) 
				|| ball.didCollideRight(leftPaddle)
				) {
			ball.setXSpeed(-ball.getXSpeed());
			
			
		}*/
		
		if (ball.didCollideTop(leftPaddle) || ball.didCollideBottom(leftPaddle) || ball.getY() <= 0 || ball.getY() >= 580) {
			 ball.setYSpeed(-ball.getYSpeed());}
		else if (ball.didCollideLeft(leftPaddle) 
						|| ball.didCollideRight(leftPaddle) || ball.getX() >= 780 || ball.getX() <= 0){
				 ball.setXSpeed(-ball.getXSpeed());
		}
		
		
		


		//see if the paddles need to be moved
		if(keys[0] == true)
		{
			if (leftPaddle.getY() >= 0)
			//move left paddle up and draw it on the window
				leftPaddle.moveUpAndDraw(graphToBack);
		}
		if(keys[1] == true)
		{
			if (leftPaddle.getY() <= 510)
			//move left paddle down and draw it on the window
				leftPaddle.moveDownAndDraw(graphToBack);

		}
		if(keys[2] == true)
		{
			if (leftPaddle.getX() >= 0)
				leftPaddle.moveLeftAndDraw(graphToBack);

		}
		if(keys[3] == true)
		{
			if (leftPaddle.getX() <= 775)
				leftPaddle.moveRightAndDraw(graphToBack);
		}

		
		for(Block bricks : bricks){
			bricks.draw(graphToBack);
		}

		for(Brick brick : bricks){
			if (ball.didCollideLeft(brick) || ball.didCollideRight(brick)){
				ball.setXSpeed(ball.getXSpeed() * -1);
				brick.draw(graphToBack, Color.WHITE);
				bricks.remove(brick);
			}
			if (ball.didCollideTop(brick) || ball.didCollideBottom(brick)){
				ball.setYSpeed(ball.getYSpeed() * -1);
				brick.draw(graphToBack, Color.WHITE);
				bricks.remove(brick);
			}
		}


		if (bricks.size() <= 0){
			bricks = levelTwo.getLevel();
		}






		
		twoDGraph.drawImage(back, null, 0, 0);
	}

	public void keyPressed(KeyEvent e)
	{
		switch(toUpperCase(e.getKeyChar()))
		{
			case 'W' : keys[0]=true; break;
			case 'S' : keys[1]=true; break;
			case 'A' : keys[2]=true; break;
			case 'D' : keys[3]=true; break;
		}
	}

	public void keyReleased(KeyEvent e)
	{
		switch(toUpperCase(e.getKeyChar()))
		{
			case 'W' : keys[0]=false; break;
			case 'S' : keys[1]=false; break;
			case 'A' : keys[2]=false; break;
			case 'D' : keys[3]=false; break;
		}
	}

	public void keyTyped(KeyEvent e){}
	
   public void run()
   {
   	try
   	{
   		while(true)
   		{
   		   Thread.currentThread().sleep(8);
            repaint();
         }
      }catch(Exception e)
      {
      }
  	}	
}